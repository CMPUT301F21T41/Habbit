package com.example.habbit.handlers;

import androidx.annotation.NonNull;

import com.example.habbit.models.Habit;
import com.example.habbit.models.User;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.HashMap;

public class HabitInteractionHandler {
    /**
     * This var is of type {@link CollectionReference} and contains the users collection in firestore
     */
    static final CollectionReference userCollectionReference = FirebaseFirestore.getInstance().collection("users");

    /**
     * This var is of type {@link String} and contains the username
     */
    FirebaseAuth userAuth = FirebaseAuth.getInstance();
    FirebaseUser user = userAuth.getCurrentUser();
    String userID;

    /**
     * sets the username to the current user's username
     */
    public HabitInteractionHandler() {
        userID = user.getUid();
    }

    /**
     * Adds a habit to the firestore database
     * @param habit given a habit of type {@link Habit}, add it to the database
     */
    public void addHabit(Habit habit) {
        DocumentReference userDoc = userCollectionReference.document(userID);
        // adding a habit using an autogenerated ID rather than using titletext
        userDoc.collection("Habits")
                .add(habit);
    }

    /**
     * Updates a habit in the firestore database
     * @param newHabit given an updated habit of type {@link Habit}, update it in the database
     */
    public void updateHabit(Habit newHabit){
        // get the updated values
        String titleText = newHabit.getTitle();
        String reasonText = newHabit.getReason();
        String dateText = newHabit.getDate();
        boolean isChecked = newHabit.isChecked();
        HashMap<String, Boolean> schedule = newHabit.getSchedule();
        boolean isPublic = newHabit.isPublic();
        int progress = newHabit.getProgress();
        // update the firestore
        DocumentReference userDoc = userCollectionReference.document(userID);
        userDoc.collection("Habits").document(newHabit.getId())
                .update("title", titleText,
                        "reason", reasonText,
                        "date", dateText,
                        "checked", isChecked,
                        "schedule", schedule,
                        "public", isPublic,
                        "progress", progress);
    }

    /**
     * Deletes a habit in the firestore database
     * @param habit given a {@link Habit} to delete, delete it from the database
     */
    public void deleteHabit(Habit habit){
        // TODO: Gonna need to figure out how to delete subcollections too, but not yet
        // doesn't really affect the app, just clutters up our firestore
        DocumentReference userDoc = userCollectionReference.document(userID);

        // get a reference to the habit's habit events
        CollectionReference habitEventColRef = userDoc.collection("Habits")
                .document(habit.getId())
                .collection("Habit Events");

        // delete every habit event in the habit event collection
       habitEventColRef.addSnapshotListener(((value, error) -> {
                    String habitEventID;
                    assert value != null;
                    for (QueryDocumentSnapshot habitEventDocument: value){
                        habitEventDocument.getData();

                        // get the id of each habit event iteratively
                        habitEventID = habitEventDocument.getId();

                        // delete the respective habit event with id
                        habitEventColRef.document(habitEventID).delete();
                    }
                }));

        userDoc.collection("Habits").document(habit.getId())
                .delete();


    }
}
